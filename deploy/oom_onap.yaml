heat_template_version: 2013-05-23

description:  OOM Template 

parameters:
  key_name:
    type: string
    default: ONAP
    description: You own existing key pair to use for the instance
  flavor:
    type: string
    description: Instance type for OOM
    default: ONAP_FSB
  image:
    type: string
    default: ubuntu1604
    description: ID or name of the image to use for the instance
  user:
    type: string
    description: Default user
    default: ubuntu
  net1:
    type: string
    description: (existing) network for the server to be created
    default: ONAP_ProvNet_1
    constraints:
#      - custom_constraint: neutron.network
  AnsibleRepository:
    type: string
    label: Ansible_Repository
    description: Ansible Repository for playbooks and roles.
    default: https://github.com/moffzilla/ONAP_LAB.git
  AnsiblePlaybook:
    type: string
    label: Ansible_Playbook
    description: Ansible Playbook Startup.
    default: deploy/site.yaml
  OOMTemplate:
    type: string
    label: OOM_Template
    description: OOM Size to deploy.
    default: minimal.cfg.j2
  PROXY_LAB:
    type: string
    label: HTTP_PROXY
    description: HTTP and HTTPS Proxy.
    default: http://10.7.0.140:8081/
  DNS_LAB:
    type: string
    label: DNS_LAB
    description: Provide your primary DNS.
    default: 10.7.0.140      
  DNS_SEARCH:
    type: string
    label: DNS_SEARCH
    description: Provide your default DNS Search Domain.
    default: bete.ericy.com 


resources:

  onap_security_group:
    type: OS::Neutron::SecurityGroup
    properties:
      name: onap_security_group
      rules:
        - protocol: tcp
        - protocol: icmp

  my_onap:
    type: OS::Nova::Server
    properties:
      name: OOM
      image: { get_param: image }
      flavor: { get_param: flavor }
      key_name: { get_param: key_name }
      config_drive: 'True'
#      block_device_mapping: [{volume_id: { get_param: fsb2_cinder_vol }, device_name: vda}]
      security_groups:
        - { get_resource: onap_security_group }
      networks:
        - network: {get_param: net1}
      user_data:
        str_replace:
          params:
            __AnsibleRepository__: { get_param: AnsibleRepository }
            __AnsiblePlaybook__: { get_param: AnsiblePlaybook }
            __OOMTemplate__: { get_param: OOMTemplate }
            __PROXY_LAB__: { get_param: PROXY_LAB }
            __DNS_LAB__: { get_param: DNS_LAB }
            __DNS_SEARCH__: { get_param: DNS_SEARCH }            
          template: |
            #!/bin/bash -ex
            sudo sh -c 'echo search __DNS_SEARCH__ >> /etc/resolv.conf'
            sudo sh -c 'echo nameserver __DNS_LAB__ >> /etc/resolv.conf'            
            http_proxy=__PROXY_LAB__
            https_proxy=__PROXY_LAB__
            #no_proxy="localhost,127.0.0.1,localaddress,.localdomain.com"
            HTTP_PROXY=__PROXY_LAB__
            HTTPS_PROXY=__PROXY_LAB__
            #NO_PROXY="localhost,127.0.0.1,localaddress,.localdomain.com"
            # install dependencies
            sudo apt-add-repository ppa:ansible/ansible -y 
            sudo apt-get update -y
            sudo apt-get install -y ansible git
            # Configure Ansible
            echo "localhost ansible_connection=local" > /etc/ansible/hosts
            echo "log_path = /var/log/ansible.log" >> /etc/ansible/ansible.cfg
            # Launch Installer
            #sudo ansible-pull -U ", __AnsibleRepository__," ","-e"," ","config=",__OOMTemplate__," ",__AnsiblePlaybook__," ","-vvvv"," 
              

outputs:
  instance_name:
    description: Get the instance's name
    value: { get_attr: [ my_onap, name ] }
  instance_ip:
    description: IP address of the instance
    value: { get_attr: [my_onap, first_address] }